import { useState } from 'react'
import { Form, Formik, Field } from 'formik'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import axios from 'axios'
import Swal from 'sweetalert2'


export default function Home() {
  const [cuotas, setCuotas] = useState(null)

  const handleCuotas = (e,num) => {
    e.preventDefault()
    setCuotas(num)
  }

  const Toast = Swal.mixin({
    toast: true,
    position: 'top-end',
    showConfirmButton: false,
    timer: 3000,
    timerProgressBar: true,
    didOpen: (toast) => {
      toast.addEventListener('mouseenter', Swal.stopTimer)
      toast.addEventListener('mouseleave', Swal.resumeTimer)
    }
  })

  const prestamoEnCuotas = (num,divisor) => {
    let aux
    let total = 0
    switch(divisor){
      case 1:
        aux = (10 * num)/100 + num 
        total = Math.round(aux/divisor)
      break;
      case 3: 
        aux = (20 * num)/100 + num 
        total = Math.round(aux/divisor)
      break;
      case 6:
        aux = (30 * num)/100 + num 
        total = Math.round(aux/divisor)
      break;
      case 12:
        aux = (40 * num)/100 + num 
        total = Math.round(aux/divisor)
      break;
      default:
        break;
    }
    return total
  }
  
  return (
    <div className={styles.container}>
      <Head>
        <title>Form</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1>¿Necesitas efectivo?</h1>
        <h2>Dejanos tus datos asi nos comunicamos para otorgarte tu credito</h2>

        <Formik
          initialValues={{
            nombre: "",
            apellido: "",
            once: "11",
            telefono: "",
            monto: "",
            cuotas: ""
          }}
          validate={(fields) => {
            let errors = {}
            if(!fields.nombre){
              errors.nombre = "por favor completa con un nombre"
            }else if(!/^[a-zA-ZÀ-ÿ\s]{1,40}$/.test(fields.nombre)){
              errors.nombre = 'El nombre solo puede contener letras y espacios'
            }
            if(!fields.apellido){
              errors.apellido = "por favor completa con un apellido"
            }else if(!/^[a-zA-ZÀ-ÿ\s]{1,40}$/.test(fields.apellido)){
              errors.apellido = 'El apellido solo puede contener letras y espacios'
            }
            if(!fields.telefono){
              errors.telefono = "sin un telefono no podremos comunicarnos contigo"
            }else if(!/^([0-9]){1,8}$/.test(fields.telefono)){
              errors.telefono = "deben ser solo numeros y maximo 8 numeros"
            }
            if(!fields.monto){
              errors.monto = "elige un monto"
            }
            if(!cuotas){
              errors.cuotas = "¿sabias que podes devolverlo en cuotas?"
            }
            return errors
          }}
          onSubmit={(fields) => {
            let options = {
              "method": "POST",
              "url" : "http://localhost:3001/users/create",
              "header" : {
                ContentType: 'application/json' 
              },
              "data": {
                monto: fields.monto,
                nombre: fields.nombre,
                apellido: fields.apellido,
                telefono: fields.once.concat(fields.telefono),
                cuotas: cuotas
              }
            }
            axios.request(options)
            .then(() => {
              Toast.fire({
                icon: 'success',
                title: 'datos enviados',
                text: 'nos pondremos en contacto en breve'
              })
            })
          }}
        >
          {({errors,touched,values}) => (
            <Form className={styles.form}>

              <p className={styles.monto}>${values && values.monto ? values.monto : 0}</p>
              <div className={styles.between}>
                <label>$10.000</label>
                <Field type="range" step="1000" min="10000" max="50000" name="monto" placeholder="$10.000"/>
                <label>$50.000</label> 
              </div>
              {touched.monto && errors.monto && <p className={styles.error}>{errors.monto}</p>}

              <label>Nombre:</label>
              <Field name="nombre" placeholder="Jonh"/>
              {touched.nombre && errors.nombre && <p className={styles.error}>{errors.nombre}</p>}

              <label>Apellido:</label>
              <Field name="apellido" placeholder="Doeh"/>
              {touched.apellido && errors.apellido && <p className={styles.error}>{errors.apellido}</p>}

              <label className={styles.cuotas}>Telefono:</label>
              <div className={styles.telephone}>
                <input placeholder="11" id="once" name="once" disabled/>
                <Field name="telefono" id="number" placeholder="69045897"/>
              </div>
              {touched.telefono && errors.telefono && <p className={styles.error}>{errors.telefono}</p>}

              <label className={styles.cuotas}>¿En cuantas cuotas?</label>
              <div className={styles.button}>
                <button className={cuotas === 1 ? styles.active : ""} onClick={(e) => handleCuotas(e,1)}>1 cuota</button>
                <button className={cuotas === 3 ? styles.active : ""} onClick={(e) => handleCuotas(e,3)}>3 cuotas</button>
                <button className={cuotas === 6 ? styles.active : ""} onClick={(e) => handleCuotas(e,6)}>6 cuotas</button>
                <button className={cuotas === 12 ? styles.active : ""} onClick={(e) => handleCuotas(e,12)}>12 cuotas</button>
              </div>
              {touched.cuotas && errors.cuotas && <p className={styles.error}>{errors.cuotas}</p>}
              <span className={styles.cuentaTotal}>me devolverias {cuotas} cuotas de ${values && values.monto && cuotas ? prestamoEnCuotas(values.monto,cuotas) : 0}</span>
              <button type="submit">Solicitar</button>
            </Form>
          )}
        </Formik>
      </main>

      <footer className={styles.footer}>
        {/* <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a> */}
      </footer>
    </div>
  )
}
